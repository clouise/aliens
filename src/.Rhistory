p <- .58     # Your chance of winning a point
n.sim <- 1e4 # Iterations in the simulation
sim <- replicate(n.sim, {
x <- sample(1:0, 3*(m+n), prob=c(p, 1-p), replace=TRUE)
points.1 <- cumsum(x)
points.0 <- cumsum(1-x)
win.1 <- points.1 >= m & points.0 <= points.1-margin
win.0 <- points.0 >= n & points.1 <= points.0-margin
which.max(c(win.1, TRUE)) < which.max(c(win.0, TRUE))
})
mean(sim)
x <- sample(1:0, 3*(m+n), prob=c(p, 1-p), replace=TRUE)
x
n <- 21      # Points your opponent needs to win
m <- 21      # Points you need to win
margin <- 2  # Minimum winning margin
p <- .58     # Your chance of winning a point
n.sim <- 1e4 # Iterations in the simulation
x <- sample(1:0, 3*(m+n), prob=c(p, 1-p), replace=TRUE)
x
cumsum(x)
points.0 <- cumsum(1-x)
cumsum(1-x)
points.1 <- cumsum(x)
points.0 <- cumsum(1-x)
points.1 >= m & points.0 <= points.1-margin
win.1 <- points.1 >= m & points.0 <= points.1-margin
win.0 <- points.0 >= n & points.1 <= points.0-margin
win.1
which.max(c(win.1, TRUE))
?replicate
3*42
:help
#!/usr/bin/Rscript
suppressMessages(library(methods))
suppressMessages(library(yaml))
suppressMessages(library(readr))
suppressMessages(library(forcats))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(RMySQL))
?adist
adist("carmen","cake")
adist("cakke","cake")
suppressMessages(library(methods))
suppressMessages(library(yaml))
suppressMessages(library(readr))
suppressMessages(library(forcats))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(RMySQL))
# get arguments
#args <- commandArgs(trailingOnly=TRUE)
config <- read_yaml("/Users/carmenlouise/Documents/FactoryTest/NCR.yml")
# Read in Config
#config <- read_yaml(args[1])
prepare <- config$prepare
parts_path <- prepare$parts_load_path
tickets_path <- prepare$tickets_load_path
history_tickets <- prepare$tickets_history
history_parts <- prepare$parts_history
history_parts_backup <- prepare$parts_history_backup
history_tickets_backup <- prepare$tickets_history_backup
TTL_path <- file.path(prepare$ttl_load_path, "TicketTrain_TTL.csv")
fix_path <- file.path(prepare$fix_load_path, "TicketTrain_Fix.csv")
ttl_working_path <- prepare$ttl_working_path
fix_working_path <- prepare$fix_working_path
affinities_load_path <- prepare$affinities_load_path
# Set file paths for Parts and Tickets
parts_files <- list.files(parts_path)
tickets_files <- list.files(tickets_path)
weekly_parts <- file.path(parts_path, parts_files)
weekly_tickets <- file.path(tickets_path, tickets_files)
# MySql Connection Info
db <- config$database
user <- db$user
password <- db$password
hostname <- db$hostname
database <- db$database
mydb <- dbConnect(MySQL(), user=user, password=password, dbname=database, host=hostname)
if (length(list.files(parts_path)) == 0){
quit(status = 0, save = "no")
}
if (length(list.files(tickets_path)) == 0){
quit(status = 0, save = "no")
}
# Read in current weekly files
parts_curr <- read_csv(weekly_parts, col_types = cols())
tickets_curr <- read_csv(weekly_tickets, col_types = cols())
# Subset weekly columns to match history files & get deltas
cols <- dbListFields(mydb, "all_tickets")
tickets_curr <- tickets_curr %>% select(one_of(cols))
rs <- dbSendQuery(mydb, "select MAX(`Fin W/E Date`) from all_tickets;")
max_date <- dbFetch(rs)
names(max_date)[1] <- 'date'
dbClearResult(rs);rm(rs)
tickets_delta <- tickets_curr %>% filter(`Fin W/E Date` > max_date$date)
dbWriteTable(mydb, "all_tickets", tickets_delta, append = TRUE, row.names = FALSE)
cols <- dbListFields(mydb, "all_parts")
parts_curr <- parts_curr %>% select(one_of(cols))
rs <- dbSendQuery(mydb, "select MAX(`Fin W/E Date`) from all_parts;")
max_date <- dbFetch(rs)
names(max_date)[1] <- 'date'
dbClearResult(rs);rm(rs)
parts_delta <- parts_curr %>% filter(`Fin W/E Date` > max_date$date)
dbWriteTable(mydb, "all_parts", parts_delta, append = TRUE, row.names = FALSE)
rm(tickets_curr);rm(tickets_delta);rm(parts_curr);rm(parts_delta);gc()
rs <- dbSendQuery(mydb, "select * from all_tickets;")
tickets <- dbFetch(rs, n = -1)
dbClearResult(rs);rm(rs);
rs <- dbSendQuery(mydb, "select * from all_parts;")
parts <- dbFetch(rs, n = -1)
dbClearResult(rs);rm(rs);
affinities <- merge(select(tickets, `Serial Nbr`, `Fin W/E Date`, `Area of Failure`), select(parts, `Serial Number`, `Fin W/E Date`, `Part Description`),
by.x = c("Serial Nbr", "Fin W/E Date"), by.y = c("Serial Number", "Fin W/E Date"))
affinities <- select(affinities,-`Fin W/E Date`, -`Serial Nbr`)
affinities <- filter(affinities,`Area of Failure` != "")
affinities2 <- merge(affinities %>% group_by(`Area of Failure`) %>% tally(), affinities %>% group_by(`Area of Failure`,`Part Description`) %>%
tally(), all.y = TRUE, by = "Area of Failure")
affinities2$Proportion <- affinities2$n.y/affinities2$n.x
affinities2 <- select(affinities2,`Area of Failure`, `Part Description`, Proportion)
affinities2 <- affinities2 %>% arrange(`Area of Failure`,desc(Proportion))
dbWriteTable(mydb, "part_recommendations", affinities2, overwrite=TRUE, row.names = FALSE)
all_cons <- dbListConnections(MySQL())
for(con in all_cons){
dbDisconnect(con)
}
rm(mydb)
rm(affinities);rm(affinities2);gc()
# Run transformations
tickets$`Fin W/E Date` <- as.Date(tickets$`Fin W/E Date`)
parts$`Fin W/E Date` <- as.Date(parts$`Fin W/E Date`)
tickets <- filter(tickets, !is.na(`Area of Failure`))
tickets <- filter(tickets, !is.na(`Serial Nbr`))
tickets <- filter(tickets, `Serial Nbr` != " ")
tickets <- filter(tickets, `Serial Nbr` != "")
tickets <- filter(tickets, !is.na(`Fin W/E Date`))
tickets <- filter(tickets, !grepl("\\{",`Serial Nbr`))
tickets <- filter(tickets, !grepl("\\}",`Serial Nbr`))
tickets <- filter(tickets, `Serial Nbr` != "0")
tickets <- filter(tickets, `Serial Nbr` != ".")
tickets <- tickets %>% arrange(`Serial Nbr`, desc(`Fin W/E Date`))
tickets <- tickets %>% filter(!is.na(`Area of Failure`))
tickets <- tickets %>% filter(`Area of Failure` != "")
tickets$`Area of Failure` <- as.factor(tickets$`Area of Failure`)
tickets %>% count(`Area of Failure`) %>% arrange(desc(n))
tickets <- tickets %>% mutate(`Area of Failure` = fct_lump(`Area of Failure`, n = 18))
length(unique(tickets$`Area of Failure`))
tickets$`Serial Nbr` <- paste(tickets$`Customer Name`,tickets$`Serial Nbr`, sep = "-")
parts$`Serial Number` <- paste(parts$`Customer Name`,parts$`Serial Number`, sep = "-")
tickets2 <- tickets %>% select(`Serial Nbr`,`Area of Failure`,`Fin W/E Date`)
tickets2 <- tickets2 %>% filter(!is.na(`Fin W/E Date`))
tickets2 <- unique(tickets2)
t2 <- tickets2 %>% select(`Serial Nbr`, `Fin W/E Date`) %>% unique()
non_events <- t2 %>% group_by(`Serial Nbr`) %>% filter(`Fin W/E Date` < Sys.Date()-29 & `Fin W/E Date` >= Sys.Date()-360) %>% top_n(1,wt=desc(`Fin W/E Date`))
non_events2 <- non_events %>%
group_by(`Serial Nbr`) %>%
do( data.frame(., Date= seq(.$`Fin W/E Date`,
Sys.Date()-29, by = '1 month')))
non_events2 <- non_events2 %>% select(`Serial Nbr`,Date) %>% ungroup()
names(non_events2)[2] <- "Fin W/E Date"
non_events2 <- as.data.frame(non_events2)
t2 <- rbind(t2,non_events2)
names(tickets2)[3] <- "Date_Of_Prev_Fix"
rm(non_events);rm(non_events2);gc()
t2 <- unique(t2)
# AUSTRALIA POST-115-48707959
# AUSTRALIA POST-115-46199552 - 2017-02-17
output <- merge(tickets2, t2, by="Serial Nbr", all.y = TRUE) %>%
arrange(`Serial Nbr`, desc(`Fin W/E Date`), desc(Date_Of_Prev_Fix))
output <- output %>% group_by(`Serial Nbr`,`Fin W/E Date`) %>% summarise(Next_Failure=min(Date_Of_Prev_Fix[Date_Of_Prev_Fix > `Fin W/E Date`])) %>% ungroup() %>% unique()
Next_Fix <- merge(output, tickets2, by.x = c("Serial Nbr","Next_Failure"), by.y = c("Serial Nbr","Date_Of_Prev_Fix"), all.x = TRUE)
Previous_Fix <- merge(output, tickets2, by.x = c("Serial Nbr"), by.y = c("Serial Nbr"), all.x = TRUE)
Previous_Fix <- select(Previous_Fix,-Next_Failure)
Previous_Fix <- Previous_Fix %>% filter(Date_Of_Prev_Fix <= `Fin W/E Date`)
Previous_Fix <- filter(Previous_Fix,`Fin W/E Date` < Sys.Date()-29)
Next_Fix <- filter(Next_Fix,`Fin W/E Date` < Sys.Date()-29)
Previous_Fix$Item_Category <- "PreviousFix"
Previous_Fix$Transaction_ID <- paste(Previous_Fix$`Serial Nbr`, Previous_Fix$`Fin W/E Date`, sep = " - ")
names(Previous_Fix)[3] <- "Item_ID"
Next_Fix$Item_Category <- "CurrentProblem"
Next_Fix$Transaction_ID <- paste(Next_Fix$`Serial Nbr`, Next_Fix$`Fin W/E Date`, sep = " - ")
names(Next_Fix)[4] <- "Item_ID"
rm(output);gc()
# output$Item_Category[output$Date == output$`Fin W/E Date`] <- "CurrentProblem"
# output$Item_Category[output$Date < output$`Fin W/E Date`] <- "PreviousFix"
# output$Transaction_ID <- paste(output$`Serial Nbr`, output$`Fin W/E Date`, sep = " - ")
# names(output)[2] <- "Item_ID"
# output <- filter(output,`Fin W/E Date` < Sys.Date()-29)
###### TTL
TTL <- merge(tickets2, t2, by="Serial Nbr", all.y = TRUE) %>%
arrange(`Serial Nbr`, desc(`Fin W/E Date`), desc(Date_Of_Prev_Fix))
TTL <- TTL %>% group_by(`Serial Nbr`,`Fin W/E Date`) %>% summarise(Next_Failure=min(Date_Of_Prev_Fix[Date_Of_Prev_Fix > `Fin W/E Date`])) %>% ungroup() %>% unique()
TTL$Transaction_ID <- paste(TTL$`Serial Nbr`, TTL$`Fin W/E Date`, sep = " - ")
TTL <- TTL %>% mutate(TTL = as.numeric(Next_Failure - `Fin W/E Date`))
TTL <- filter(TTL,`Fin W/E Date` < Sys.Date()-29)
TTL$TTL[is.infinite(TTL$TTL)] <- 4000
TTL <- TTL %>% select(-Next_Failure,-`Fin W/E Date`,-`Serial Nbr`) %>% filter(TTL <= 5000 & !is.na(TTL))
TTL$Item_Category <- "TTL"
TTL$Item_ID <- ""
TTL$Item_ID[TTL$TTL <= 4*7] <- "Less than 4 weeks"
TTL$Item_ID[TTL$TTL > 4*7] <- "Greater than 4 weeks"
TTL <- TTL %>% select(-TTL) %>% ungroup()
ProblemCount <- Previous_Fix %>% filter(Item_Category != "CurrentProblem") %>% group_by(Transaction_ID,Item_ID) %>% summarise(value=n()) %>% ungroup()
names(ProblemCount)[2] <- "Item_Category"
names(ProblemCount)[3] <- "Item_ID"
ProblemCount$Item_Category <- paste("Number of Fixes", ProblemCount$Item_Category, sep = " ")
prevHist <- Previous_Fix %>% filter(Item_Category != "CurrentProblem") %>% arrange(Transaction_ID,desc(Date_Of_Prev_Fix)) %>% group_by(Transaction_ID) %>%
mutate(rownum=row_number()) %>% filter(rownum <= 3) %>% ungroup()
prevHist$Item_Category <- paste(prevHist$Item_Category,prevHist$rownum,sep = "_")
prevHist <- prevHist %>% select(Transaction_ID, Item_Category, Item_ID) %>% ungroup()
Min_max <- Previous_Fix %>% group_by(Transaction_ID) %>% summarise(min = min(Date_Of_Prev_Fix), max=max(`Fin W/E Date`)) %>% unique() %>% ungroup()
#Min_max <- Min_max %>% filter(min != max)
Min_max$Time <- as.numeric(Min_max$max-Min_max$min)+1
DaysSince <- Previous_Fix %>% filter(Item_Category == "PreviousFix") %>% group_by(Transaction_ID,Item_ID) %>% top_n(1,Date_Of_Prev_Fix)
DaysSince <- DaysSince %>% select(Transaction_ID,Item_ID,Date_Of_Prev_Fix,`Fin W/E Date`) %>% mutate(Days_Since_Fix = as.numeric(`Fin W/E Date` - Date_Of_Prev_Fix)) %>%
select(-Date_Of_Prev_Fix,-`Fin W/E Date`) %>% ungroup()
names(DaysSince)[2] <- "Item_Category"
names(DaysSince)[3] <- "Item_ID"
DaysSince$Item_Category <- paste("Days Since", DaysSince$Item_Category, sep = " ")
Previous <- Previous_Fix %>% group_by(Transaction_ID) %>% filter(Item_Category == "PreviousFix") %>%
summarise(Previous_Fixes = n()) %>% ungroup()
Previous_Fix <- Previous_Fix %>% select(Transaction_ID, Item_Category, Item_ID) %>% ungroup()
Next_Fix <- Next_Fix %>% select(Transaction_ID, Item_Category, Item_ID) %>% ungroup()
output <- rbind(Previous_Fix,Next_Fix)
output <- output %>% arrange(Transaction_ID)
# output <- output %>% select(Transaction_ID, Item_Category, Item_ID)
# output$Item_ID <- as.character(output$Item_ID)
Hist <- merge(Min_max, Previous, by = "Transaction_ID", all.x = TRUE) %>% select(-min,-max)
Hist$Previous_Fixes[is.na(Hist$Previous_Fixes)] <- 0
Hist$FixesPerDay <- Hist$Previous_Fixes/Hist$Time
Hist2 <- Hist %>% select(-Time) %>% gather(-Transaction_ID,key = "Item_Category",value = "Item_ID")
Hist2$Item_ID <- as.character(Hist2$Item_ID)
parts2 <- merge(t2, select(parts,`Serial Number`,`Fin W/E Date`,`Part Description`), by.x = c("Serial Nbr"), by.y = c("Serial Number"))
parts3 <- parts2 %>% filter(`Fin W/E Date.x` >= `Fin W/E Date.y`)
parts3 <- filter(parts3,`Fin W/E Date.x` < Sys.Date()-29)
parts3$Transaction_ID <- paste(parts3$`Serial Nbr`, parts3$`Fin W/E Date`, sep = " - ")
parts3$Item_ID <- parts3$`Part Description`
parts3$Item_Category <- "Part Used"
parts3 <- parts3 %>% select(Transaction_ID, Item_Category, Item_ID)
Final <- as.data.frame(rbind(DaysSince, output, Hist2, prevHist, ProblemCount, parts3, TTL))
Final <- Final %>% dplyr::arrange(`Transaction_ID`)
Final <- unique(Final)
Final <- filter(Final, !is.na(Item_ID))
Final <- filter(Final, Item_ID != "")
UIDStoRemove <- filter(Final, Item_Category == "CurrentProblem" & Item_ID == "NON-REMEDIAL")
Final <- Final[!Final$Transaction_ID %in% UIDStoRemove$Transaction_ID,]
Final <- Final[,c(1,3,2)]
TTL <- Final %>% filter(Item_Category != "CurrentProblem")
Fix <- Final %>% filter(Item_Category != "TTL")
write_csv(TTL, TTL_path, na = "")
write_csv(Fix, fix_path, na = "")
rm(list=setdiff(ls(),c("Final","tickets","parts","ttl_working_path","fix_working_path","weekly_parts","weekly_tickets")));gc()
##############################################################
# Current Predictions
##############################################################
most_recent_tickets <- tickets %>% group_by(`Serial Nbr`) %>% summarise(`Fin W/E Date` = max(`Fin W/E Date`))
most_recent_tickets <- most_recent_tickets %>% filter(!is.na(`Fin W/E Date`))
most_recent_tickets <- merge(most_recent_tickets,tickets, by = c("Serial Nbr",'Fin W/E Date'), all.x = TRUE)
most_recent_tickets <- most_recent_tickets %>% select(`Serial Nbr`, `Fin W/E Date`, `LOB`, `Customer Name`, `Site Name`, `Product ID Desc`,
`WO Type` , `CSR Number`, `Country Name`,
`Territory`, `Branch`, `Area of Failure`) %>% unique() %>% arrange(`Serial Nbr`, desc(`Fin W/E Date`))
tickets2 <- tickets %>% select(`Serial Nbr`,`Area of Failure`,`Fin W/E Date`)
tickets2 <- tickets2 %>% filter(!is.na(`Fin W/E Date`))
t2 <- most_recent_tickets %>% select(`Serial Nbr`, `Fin W/E Date`) %>% unique()
tickets2 <- unique(tickets2)
names(tickets2)[3] <- "Date_Of_Prev_Fix"
output <- merge(tickets2, t2, by="Serial Nbr", all.y = TRUE) %>% filter(Date_Of_Prev_Fix <= `Fin W/E Date`) %>%
arrange(`Serial Nbr`, desc(`Fin W/E Date`), desc(Date_Of_Prev_Fix))
output$Item_Category <- "PreviousFix"
output$Transaction_ID <- output$`Serial Nbr`
names(output)[2] <-"Item_ID"
ProblemCount <- output %>% group_by(Transaction_ID,Item_ID) %>% summarise(value=n()) %>% ungroup()
names(ProblemCount)[2] <- "Item_Category"
names(ProblemCount)[3] <- "Item_ID"
ProblemCount$Item_Category <- paste("Number of Fixes", ProblemCount$Item_Category, sep = " ")
prevHist <- output %>% arrange(Transaction_ID,desc(Date_Of_Prev_Fix)) %>% group_by(Transaction_ID) %>%
mutate(rownum=row_number()) %>% filter(rownum <= 3) %>% ungroup()
prevHist$Item_Category <- paste(prevHist$Item_Category,prevHist$rownum,sep = "_")
prevHist <- prevHist %>% select(Transaction_ID, Item_Category, Item_ID) %>% ungroup()
Min_max <- output %>% group_by(Transaction_ID) %>% summarise(min = min(Date_Of_Prev_Fix), max=Sys.Date()) %>% unique() %>% ungroup()
Min_max$Time <- as.numeric(Min_max$max-Min_max$min)+1
DaysSince <- output %>% group_by(Transaction_ID,Item_ID) %>% top_n(1,Date_Of_Prev_Fix)
DaysSince <- DaysSince %>% select(Transaction_ID,Item_ID,Date_Of_Prev_Fix) %>% mutate(Days_Since_Fix = as.numeric(Sys.Date() - Date_Of_Prev_Fix)) %>%
select(-Date_Of_Prev_Fix) %>% ungroup()
names(DaysSince)[2] <- "Item_Category"
names(DaysSince)[3] <- "Item_ID"
output <- output %>% select(Transaction_ID, Item_Category, Item_ID)
output$Item_ID <- as.character(output$Item_ID)
Previous <- output %>% group_by(Transaction_ID) %>% filter(Item_Category == "PreviousFix") %>%
summarise(Previous_Fixes = n()) %>% ungroup()
Hist <- merge(Min_max, Previous, by = "Transaction_ID", all.x = TRUE) %>% select(-min,-max)
Hist$Previous_Fixes[is.na(Hist$Previous_Fixes)] <- 0
Hist$FixesPerDay <- Hist$Previous_Fixes/Hist$Time
Hist2 <- Hist %>% select(-Time) %>% gather(-Transaction_ID,key = "Item_Category",value = "Item_ID")
Hist2$Item_ID <- as.character(Hist2$Item_ID)
parts2 <- merge(tickets2, select(parts,`Serial Number`,`Fin W/E Date`,`Part Description`), by.x = c("Serial Nbr","Date_Of_Prev_Fix"), by.y = c("Serial Number","Fin W/E Date"))
parts3 <- merge(parts2, t2, by="Serial Nbr", all.y = TRUE) %>% filter(Date_Of_Prev_Fix <= `Fin W/E Date`) %>%
arrange(`Serial Nbr`, desc(`Fin W/E Date`), desc(Date_Of_Prev_Fix))
parts3$Transaction_ID <- parts3$`Serial Nbr`
parts3$Item_ID <- parts3$`Part Description`
parts3$Item_Category <- "Part Used"
parts3 <- parts3 %>% select(Transaction_ID, Item_Category, Item_ID)
Final <- as.data.frame(rbind(DaysSince, output, Hist2, prevHist, ProblemCount, parts3))
Final <- Final %>% dplyr::arrange(`Transaction_ID`)
Final <- unique(Final)
Final <- filter(Final, !is.na(Item_ID))
Final <- filter(Final, Item_ID != "")
Final <- Final[,c(1,3,2)]
write_csv(Final,file.path(ttl_working_path,"Predictions_TTL.csv"),na="")
write_csv(Final,file.path(fix_working_path,"Predictions_FIX.csv"),na="")
install.packages(c("bindr", "DBI", "DiagrammeR", "ggfortify", "hms", "httpuv", "igraph", "openssl", "packrat", "RcppArmadillo", "RcppParallel", "rmarkdown", "rsconnect", "selectr", "sfsmisc", "stringi", "survey", "widyr", "yaml"))
remove.packages("igraph")
install.packages("gbm")
?install.packages("gbm")
?gbm
attach(iris)
df <- iris
attach(iris)
df <- iris
View(df)
transition_matrix = [0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85]
transition_matrix = matrix(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85, nrow = 3)
transition_matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix %*% matrix
matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix %*% matrix
init = matrix(0.2, 0.8, 0)
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
init = matrix(c(0.2, 0.8, 0))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
init %*% matrix
init = t(matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
init %*% matrix
init = t(matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
}
init = t(matrix(c(0.2, 0.8, 0)))
init
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
init = matrix %*% init
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
init = matrix %*% init
init
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
}
init
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
}
init
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:60){
init = matrix %*% init
}
init
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
print init
}
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
print(init)
}
matrix
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
for (i in 1:15){
init = matrix %*% init
print(init)
}
matrix %*% init %*% 2
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix %*% init %*% 2
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix %*% init %*% 4
init = (matrix(c(0.2, 0.8, 0)))
matrix = matrix(c(0.2, 0.8, 0, 0.1, 0.6, 0.3, 0, 0.15, 0.85), nrow = 3)
matrix %*% init * 15
H
library(tidyverse)
library(tidyverse)
setwd("/Users/carmenlouise/Documents/aliens")
df <- read_delim("output.txt", delim = "\t")
View(df)
?read_delim
df <- read_delim("output.txt", delim = "\t", col_names = FALSE)
View(df)
View(df)
View(df)
View(df)
gsub("/", df$X3)
gsub("/", df$X3)
gsub("//", df$X3)
?gsub
gsub("\\", df$X3)
gsub("\/", df$X3)
View(df)
filter(df, X3 contains("/"))
filter(df, X3 contains("//"))
filter(df, X3 contains("\/"))
grepl("\/", df$X3)
grepl("/", df$X3)
df <- filter(df, !grepl("/", df$X3))
View(df)
usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
states <- map_data("state")
usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + geom_polygon(data = states, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
rm(usa)
View(states)
View(states)
state.abb("alabama")
state.abb
state
View(states)
state.abb
state.abb[grep("New York", state.name)]
state.abb[grep("alabama", state.name)]
View(states)
tolower(state.abb)
tolower(state.name)
state.name[grep("AL", state.abb)]
View(states)
View(df)
state.name[grep("AB", state.abb)]
state.name[grep(df$X2, state.abb)]
View(states)
View(df)
state.name[grep(df$X3, state.abb)]
state.name[match(df$X3, state.abb)]
df$stateabb <- state.name[match(df$X3, state.abb)]
View(df)
library(tidyverse)
setwd("/Users/carmenlouise/Documents/aliens/src")
df <- read_delim("output.txt", delim = "\t", col_names = FALSE)
df <- filter(df, !grepl("/", df$X3))
glimpse(df)
colnames(df) <- c("date", "city", "state", "shape", "duration", "summary", "posted")
View(df)
as.POSIXct(df$date)
df$date
as.POSIXct(df$date, "%m/%d/%y")
warnings()
as.POSIXct(df$date, format = "%m/%d/%y", tz = "UTC")
head(as.POSIXct(df$date, format = "%m/%d/%y", tz = "UTC"))
head(df$date)
head(as.POSIXct(df$date, format = "%m/%d/%y %H:%M", tz = "UTC"))
head(df$posted)
as.POSIXct(df$posted, format = "%m/%d/%y", tz = "UTC")
library(tidyverse)
setwd("/Users/carmenlouise/Documents/aliens/src")
df <- read_delim("output.txt", delim = "\t", col_names = FALSE)
df <- filter(df, !grepl("/", df$X3))
colnames(df) <- c("date", "city", "state", "shape", "duration", "summary", "posted")
df$date <- as.POSIXct(df$date, format = "%m/%d/%y %H:%M", tz = "UTC")
df$posted <- as.POSIXct(df$posted, format = "%m/%d/%y", tz = "UTC")
df$stateabb <- state.name[match(df$X3, state.abb)]
library(tidyverse)
setwd("/Users/carmenlouise/Documents/aliens/src")
df <- read_delim("output.txt", delim = "\t", col_names = FALSE)
df <- filter(df, !grepl("/", df$X3))
colnames(df) <- c("date", "city", "state", "shape", "duration", "summary", "posted")
df$date <- as.POSIXct(df$date, format = "%m/%d/%y %H:%M", tz = "UTC")
df$posted <- as.POSIXct(df$posted, format = "%m/%d/%y", tz = "UTC")
df$stateabb <- state.name[match(df$state, state.abb)]
View(df)
View(df)
gregexpr("sec[a-z]", df$duration)
str_extract("sec[a-z]", df$duration)
str_extract(df$duration, "sec[a-z]")
str_extract(df$duration, "sec[a-z]+")
gsub(str_extract(df$duration, "sec[a-z]+"), "*60"
)
gsub("*60", str_extract(df$duration, "sec[a-z]+"))
?gsub
gsub(str_extract(df$duration, "sec[a-z]+"), "*60", df$duration)
str_extract(df$duration, "sec[a-z]+")
gsub("sec[a-z]+", "*60", df$duration)
gsub("hour[a-z]+", "/60", df$duration)
str_extract(df$duration, "sec[a-z]+")
View(df)
sort(table(df$duration))
sort(table(df$duration), desc)
state.abb
View(df)
states <- map_data("states")
( 1 + (( 7 + 23 ) / 18 )) * 6
( 1 + (( 7 + 23 ) / 18 ))
*6
2.6666666666666666666666666666*6
